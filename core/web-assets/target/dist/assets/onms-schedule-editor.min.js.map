{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/ScheduleOptions.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/Time.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/ClockMode.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/Weekdays.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/CronDefintion.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/WeekdayOptions.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/Intervals.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/parsers/CustomParser.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/parsers/DailyParser.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/Range.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/parsers/DayOfMonthParser.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/ContextError.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/index.js","webpack:///./src/main/assets/js/lib/onms-schedule-editor/templates/schedule-editor.tpl.html","webpack:///./src/main/assets/js/lib/onms-schedule-editor/templates/interval-input.tpl.html","webpack:///./src/main/assets/js/lib/onms-schedule-editor/templates/time-input.tpl.html","webpack:///./src/main/assets/js/lib/onms-schedule-editor/scripts/Types.js"],"names":["root","factory","exports","module","define","amd","a","i","window","require","ScheduleOptions","input","options","this","clockMode","ClockMode","FULL_CLOCK_SYSTEM","HALF_CLOCK_SYSTEM","Error","type","Types","DAILY","interval","at","Time","hours","minutes","from","to","daysOfWeek","dayOfMonth","weekOfMonth","dayOfWeek","String","Weekdays","Sunday","id","dayOfMonthToggle","cronExpression","timezone","undefined","showDebugOptions","convert","disableMinutes","WeekdayOptions","key","substr","toUpperCase","validate","CUSTOM","cron","CronDefinition","seconds","month","DAYS_PER_WEEK","Intervals","EVERY_HOUR","getSelectedWeekdays","join","DAYS_PER_MONTH","asCronExpression","items","split","length","ContextError","isBefore","serverZone","_onmsZoneId","moment","tz","guess","displayZone","d","CronParser","parseExpression","getCronExpression","next","toDate","errors","parsers","DailyParser","DayOfMonthParser","CustomParser","canParse","parse","newInput","suffix","mode","verify","thisTime","other","getMinutesOfDay","newMode","label","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","all","isMinutesInterval","isMinutesRange","__contains","isHoursInterval","isHoursRange","findMe","hoursInterval","fields","year","newOptions","item","weekday","hasOwnProperty","selectedWeekdays","push","daysOfWeekExpression","days","weekdays","eachDay","shortcut","EVERY_3_HOURS","EVERY_2_HOURS","EVERY_30_MINUTES","EVERY_15_MINUTES","EVERY_10_MINUTES","EVERY_5_MINUTES","Hours","Minutes","createFrom","weekdayOptions","isConcreteMinutes","isConcreteHours","minuteIntervals","hourIntervals","range","Range","end","start","cronHours","intervalIndex","rangeIndex","regExp","RegExp","test","context","params","scheduleEditorTemplate","intervalInputTemplate","timeInputTemplate","angular","directive","restrict","templateUrl","scope","link","element","attrs","verifyInput","error","e","message","console","log","$watchGroup","$watchCollection","$watch","newValue","oldValue","value","model","minutesStep","initMinutes","left","right","initHours","path","run","c","put"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,OAAQ,WACX,O,2OCVA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YAEA,YACA,U,iNACAC,EAAQ,K,IAEaC,E,WAGjB,WAAYC,I,4FAAO,SACf,IAAMC,OAA2B,IAAVD,EAAwB,GAAKA,EAIpD,GADAE,KAAKC,UAAYF,EAAQE,WAAaC,UAAUC,kBAC5CH,KAAKC,YAAcC,UAAUE,mBAAqBJ,KAAKC,YAAcC,UAAUC,kBAC/E,MAAM,IAAIE,MAAM,qCAIpBL,KAAKM,KAAOP,EAAQO,MAAQC,UAAMC,MAClCR,KAAKS,cAAuC,IAArBV,EAAQU,SAA2BV,EAAQU,SAAW,EAC7ET,KAAKU,GAAKX,EAAQW,IAAM,IAAIC,UAAK,CAACC,MAAO,EAAGC,QAAS,IACrDb,KAAKc,KAAOf,EAAQe,MAAQ,IAAIH,UAAK,CAACC,MAAO,EAAGC,QAAS,IACzDb,KAAKe,GAAKhB,EAAQgB,IAAM,IAAIJ,UAAK,CAACC,MAAO,GAAIC,QAAS,IAGtDb,KAAKgB,WAAajB,EAAQiB,YAAc,GAGxChB,KAAKiB,WAAalB,EAAQkB,YAAc,IACxCjB,KAAKkB,YAAcnB,EAAQkB,YAAc,IACzCjB,KAAKmB,UAAYpB,EAAQoB,WAAaC,OAAOC,UAASC,OAAOC,IAC7DvB,KAAKwB,iBAAmBzB,EAAQyB,kBAAoB,aAGpDxB,KAAKyB,eAAiB1B,EAAQ0B,gBAAkB,gBAGhDzB,KAAK0B,SAAW3B,EAAQ2B,eAAYC,EAGpC3B,KAAK4B,iBAAmB7B,EAAQ6B,mBAAoB,EAG9C5B,KAAKU,cAAcC,YACrBX,KAAKU,GAAK,IAAIC,UAAKX,KAAKU,KAEtBV,KAAKc,gBAAgBH,YACvBX,KAAKc,KAAO,IAAIH,UAAKX,KAAKc,OAExBd,KAAKe,cAAcJ,YACrBX,KAAKe,GAAK,IAAIJ,UAAKX,KAAKe,KAI5Bf,KAAKU,GAAGmB,QAAQ7B,KAAKC,WACrBD,KAAKc,KAAKe,QAAQ7B,KAAKC,WACvBD,KAAKe,GAAGc,QAAQ7B,KAAKC,WAGrBD,KAAKc,KAAKf,QAAQ+B,gBAAiB,EACnC9B,KAAKe,GAAGhB,QAAQ+B,gBAAiB,EAG3B9B,KAAKgB,sBAAsBe,YAC7B/B,KAAKgB,WAAa,IAAIe,UAAe/B,KAAKgB,aAE9ChB,KAAKS,SAAWW,OAAOpB,KAAKS,U,qGAGV,QAQlB,OAPyB,6CAAYT,KAAKgB,aAAjB,OACb,SAASgB,GACb,OAAgC,IAAzBhC,KAAKgB,WAAWgB,IACxBhC,OAHkB,OAIhB,SAASgC,GACV,OAAOA,EAAIC,OAAO,EAAG,GAAGC,kB,0CAWhC,GAHAlC,KAAKmC,WAGDnC,KAAKM,OAASC,UAAM6B,OACpB,OAAOpC,KAAKyB,eAIhB,IAAMY,EAAO,IAAIC,UAAe,CAACC,QAAS,EAAG1B,QAAS,EAAGD,MAAO,EAAGK,WAAY,IAAKuB,MAAO,IAAKrB,UAAW,MAG3G,GAAInB,KAAKM,OAASC,UAAMC,OAASR,KAAKM,OAASC,UAAMkC,cAAe,CAChE,IAAMhC,EAAWT,KAAKS,SAChBC,EAAK,IAAIC,UAAKX,KAAKU,GAAIR,UAAUC,mBACjCW,EAAO,IAAIH,UAAKX,KAAKc,KAAMZ,UAAUC,mBACrCY,EAAK,IAAIJ,UAAKX,KAAKe,GAAIb,UAAUC,mBAEvC,GAAiB,MAAbM,EACA4B,EAAKzB,MAAQF,EAAGE,MAChByB,EAAKxB,QAAUH,EAAGG,aACf,GAAIJ,IAAaiC,UAAUC,WAAY,CAC1C,IAAM/B,EAAQE,EAAKF,QAAUG,EAAGH,MAAQE,EAAKF,MAASE,EAAKF,MAAQ,IAAMG,EAAGH,MAC5EyB,EAAKzB,MAAQA,EACbyB,EAAKxB,QAAU,OACZ,GAAIJ,EAAW,IAAO,EAAG,CAC5B,IAAMG,EAAQE,EAAKF,MAAQ,IAAMG,EAAGH,MACpCyB,EAAKzB,MAAQA,EAAQ,IAAOH,EAAW,GACvC4B,EAAKxB,QAAU,OAEXC,EAAKF,QAAUG,EAAGH,OAClByB,EAAKzB,MAAQE,EAAKF,MAClByB,EAAKxB,QAAU,IAMfwB,EAAKzB,MAAQE,EAAKF,MAAQ,KAAOG,EAAGH,MAAQ,GAC5CyB,EAAKxB,QAAU,KAAOJ,GASlC,GAHIT,KAAKM,OAASC,UAAMkC,gBACpBJ,EAAKlB,UAAYnB,KAAK4C,sBAAsBC,KAAK,MAEjD7C,KAAKM,OAASC,UAAMuC,eAAgB,CACpC,IAAMpC,EAAK,IAAIC,UAAKX,KAAKU,GAAIR,UAAUC,mBACvCkC,EAAKxB,QAAUH,EAAGG,QAClBwB,EAAKzB,MAAQF,EAAGE,MACc,eAA1BZ,KAAKwB,iBACLa,EAAKpB,WAAajB,KAAKiB,WAEvBoB,EAAKlB,UAAYnB,KAAKmB,WAAkC,MAArBnB,KAAKkB,YAAsB,IAAM,IAAMlB,KAAKkB,YAYvF,OAJIlB,KAAKM,OAASC,UAAMkC,eAAiBzC,KAAKM,OAASC,UAAMuC,gBAAqC,MAAnBT,EAAKlB,aAChFkB,EAAKpB,WAAa,KAGfoB,EAAKU,qB,iCAIZ,GAAI/C,KAAKM,OAASC,UAAM6B,OAAQ,OACtBY,GAAQ,eAAAhD,KAAKyB,gBAAL,QAA2BwB,MAAM,KAC/C,GAAID,EAAME,OAAS,GAAoB,EAAfF,EAAME,OAC1B,MAAM,IAAIC,UAAa,iBAAkB,2BAKjD,GAAInD,KAAKM,OAASC,UAAMkC,eAChBzC,KAAKM,OAASC,UAAMkC,eAAuD,IAAtCzC,KAAK4C,sBAAsBM,OAChE,MAAM,IAAIC,UAAa,YAAa,kCAK5C,IAAKnD,KAAKM,OAASC,UAAMC,OAASR,KAAKM,OAASC,UAAMkC,gBAAoC,MAAlBzC,KAAKS,UACrET,KAAKe,GAAGqC,SAASpD,KAAKc,MACtB,MAAM,IAAIqC,UAAa,KAAM,8C,sCAMrC,OAAOnD,KAAKqD,YAAc1D,OAAO2D,c,uCAIjC,OAAOC,UAAOC,GAAGC,U,uCAGJC,GACb,IAIMC,EAJWC,UAAWC,gBAAgB7D,KAAK8D,oBAAqB,CAClEN,GAAIxD,KAAK0B,WAGMqC,OAAOC,SAC1B,OAAOT,UAAOC,GAAGG,EAAGD,GAAe1D,KAAK0B,UAAY6B,UAAOC,GAAGC,W,gCAI9D,YAA8B,IAAhBzD,KAAKiE,QAA8D,KAApC,aAAYjE,KAAKiE,QAAQf,U,kCAGxDpD,GAMd,IALD,IAAMoE,EAAU,CACX,IAAIC,UACJ,IAAIC,UACJ,IAAIC,WAEC3E,EAAI,EAAGA,EAAIwE,EAAQhB,OAAQxD,IAAK,CACrC,IAAmC,IAA/BwE,EAAQxE,GAAG4E,SAASxE,GAEpB,OADgBoE,EAAQxE,GAAG6E,MAAMzE,GAMzC,OAAO,IAAIuE,WAAeE,MAAMzE,O,0MC7NxC,Y,gcAEqBa,E,WACjB,WAAab,EAAOG,I,4FAAW,SAC3B,IAAMuE,EAAW1E,GAAS,GAC1BE,KAAKY,WAAkC,IAAnB4D,EAAS5D,MAAwB,IAAK,aAAS4D,EAAS5D,MAAO,IACnFZ,KAAKa,aAAsC,IAArB2D,EAAS3D,QAA0B,GAAI,aAAS2D,EAAS3D,QAAS,IACxFb,KAAKyE,OAASD,EAASC,QAAU,KACjCzE,KAAK0E,KAAuB,OAAhB1E,KAAKyE,OAAkBvE,UAAUC,kBAAoBD,UAAUE,kBAGvEJ,KAAK0E,OAASxE,UAAUC,oBACxBH,KAAKyE,OAAS,MAIlBzE,KAAKD,QAAUyE,EAASzE,SAAW,GACnCC,KAAK2E,SAGD1E,IAAcC,UAAUC,mBAAqBF,IAAcC,UAAUE,mBACrEJ,KAAK6B,QAAQ5B,G,wFAKjB,GAAID,KAAK0E,OAASxE,UAAUE,kBAAmB,CAC3C,GAAoB,OAAhBJ,KAAKyE,QAAmC,OAAhBzE,KAAKyE,OAC7B,MAAM,IAAIpE,MAAM,uDAA8DL,KAAKyE,OAAS,KAEhG,GAAIzE,KAAKY,OAAS,GAAkB,GAAbZ,KAAKY,MACxB,MAAM,IAAIP,MAAM,wCAA0CL,KAAKY,OAGvE,GAAIZ,KAAK0E,OAASxE,UAAUC,oBACpBH,KAAKY,MAAQ,GAAkB,GAAbZ,KAAKY,OACvB,MAAM,IAAIP,MAAM,wCAA0CL,KAAKY,OAGvE,GAAIZ,KAAKa,QAAU,GAAoB,GAAfb,KAAKa,QACzB,MAAM,IAAIR,MAAM,0CAA4CL,KAAKa,W,wCAKrE,IAAM+D,EAAW,IAAIjE,EAAKX,KAAME,UAAUC,mBAC1C,OAAwB,GAAjByE,EAAShE,MAAagE,EAAS/D,U,+BAGjCgE,GACL,KAAMA,aAAiBlE,GACnB,MAAM,IAAIN,MAAM,sDAAwD,EAAOwE,IAKnF,OAHqB7E,KAAK8E,kBACAD,EAAMC,kBACkB,I,8BAI9CC,GACJ,GAAIA,IAAY7E,UAAUC,mBAAqB4E,IAAY7E,UAAUE,kBACjE,MAAM,IAAIC,MAAM,uBAA0B0E,EAAU,KAyCxD,OArCI/E,KAAK0E,OAASK,IAEVA,IAAY7E,UAAUC,oBAEH,KAAfH,KAAKY,OAAgC,OAAhBZ,KAAKyE,SAC1BzE,KAAKY,MAAQ,GAGG,OAAhBZ,KAAKyE,QAAiC,GAAdzE,KAAKY,OAAcZ,KAAKY,MAAQ,KACxDZ,KAAKY,OAAS,IAElBZ,KAAKyE,OAAS,MAIdM,IAAY7E,UAAUE,oBAEH,IAAfJ,KAAKY,OACLZ,KAAKY,MAAQ,GACbZ,KAAKyE,OAAS,MAGK,GAAdzE,KAAKY,OAAcZ,KAAKY,OAAS,GACtCZ,KAAKyE,OAAS,KAGM,KAAfzE,KAAKY,MACVZ,KAAKyE,OAAS,KAGI,GAAbzE,KAAKY,QACVZ,KAAKY,OAAS,GACdZ,KAAKyE,OAAS,OAGtBzE,KAAK0E,KAAOK,GAET/E,O,iCAGA,QACP,OAAO,eAAC,KAAOA,KAAKY,OAAb,QAA2B,GAAK,KAAM,eAAC,KAAOZ,KAAKa,SAAb,QAA6B,IAAMb,KAAK0E,OAASxE,UAAUE,kBAAqB,IAAMJ,KAAKyE,OAAU,Q,4HC1G1J,I,EAAkB,CACdrE,kBAAmB,QACnBD,kBAAmB,Y,sUCFjBkB,E,WACF,WAAYE,EAAIyD,I,4FAAO,SACnBhF,KAAKuB,GAAKA,EACVvB,KAAKgF,MAAQA,E,wFAIb,OAAOhF,KAAKgF,MAAM/C,OAAO,EAAG,GAAGC,kB,KAIjCZ,EAAS,IAAID,EAAS,EAAG,UACzB4D,EAAS,IAAI5D,EAAS,EAAG,UACzB6D,EAAU,IAAI7D,EAAS,EAAG,WAC1B8D,EAAY,IAAI9D,EAAS,EAAG,aAC5B+D,EAAW,IAAI/D,EAAS,EAAG,YAC3BgE,EAAS,IAAIhE,EAAS,EAAG,UACzBiE,EAAW,IAAIjE,EAAS,EAAG,Y,EAMlB,CACXkE,IALQ,CACRjE,EAAQ2D,EAAQC,EAASC,EAAWC,EAAUC,EAAQC,GAKtDjE,WACAC,SACA2D,SACAC,UACAC,YACAC,WACAC,SACAC,Y,8YChCiBhD,E,WACjB,WAAYxC,I,4FAAO,SACf,IAAIC,OAA2B,IAAVD,EAAwBA,EAAQ,GACrDE,KAAKuC,aAAqC,IAApBxC,EAAQwC,QAA0BxC,EAAQwC,QAAU,GAC1EvC,KAAKa,aAAqC,IAApBd,EAAQc,QAA0Bd,EAAQc,QAAU,GAC1Eb,KAAKY,WAAiC,IAAlBb,EAAQa,MAAwBb,EAAQa,MAAQ,GACpEZ,KAAKiB,gBAA2C,IAAvBlB,EAAQkB,WAA6BlB,EAAQkB,WAAa,GACnFjB,KAAKwC,WAAiC,IAAlBzC,EAAQyC,MAAwBzC,EAAQyC,MAAQ,GACpExC,KAAKmB,eAAyC,IAAtBpB,EAAQoB,UAA4BpB,EAAQoB,UAAY,G,kGAOhF,MAHc,CACVnB,KAAKuC,QAASvC,KAAKa,QAASb,KAAKY,MAAOZ,KAAKiB,WAAYjB,KAAKwC,MAAOxC,KAAKmB,WAEjE0B,KAAK,O,0CAsBlB,OAAQ7C,KAAKwF,sBACLxF,KAAKyF,mBACLzF,KAAK0F,WAAW1F,KAAKa,QAAS,MACD,IAA9B,aAASb,KAAKa,QAAS,M,0CAI9B,OAAOb,KAAK0F,WAAW1F,KAAKa,QAAS,O,uCAIrC,OAAOb,KAAK0F,WAAW1F,KAAKa,QAAS,O,wCAIrC,OAAQb,KAAK2F,oBACL3F,KAAK4F,iBACL5F,KAAK0F,WAAW1F,KAAKY,MAAO,MACD,IAA5B,aAASZ,KAAKY,MAAO,M,qCAI5B,OAAOZ,KAAK0F,WAAW1F,KAAKY,MAAO,O,wCAInC,OAAOZ,KAAK0F,WAAW1F,KAAKY,MAAO,O,iCAG5Bd,EAAO+F,GACd,MAAqB,iBAAV/F,GACyB,IAAzB,aAAAA,GAAK,KAALA,EAAc+F,K,+BAjDK,MAA9B,GAAI7F,KAAKwF,oBACL,OAAOxF,KAAKa,QAAQoB,QAAO,eAAAjC,KAAKa,SAAL,OAAqB,KAAO,GAE3D,GAAIb,KAAK2F,kBAAmB,OAClBG,EAAgB9F,KAAKY,MAAMqB,QAAO,eAAAjC,KAAKY,OAAL,OAAmB,KAAO,GAClE,OAAOQ,OAAqC,IAA9B,aAAS0E,EAAe,KAM1C,OAA2B,GAAvB9F,KAAK4F,eACE,KAEJ,O,kCAwCO9F,GACd,GAAqB,iBAAVA,GAAgC,KAAVA,GAAiC,MAAjB,aAAAA,GAAK,KAALA,GAC7C,MAAM,IAAIO,MAAM,oFAEpB,IACM0F,GADiB,aAAAjG,GAAK,KAALA,GACOmD,MAAM,KACpC,GAAI8C,EAAO7C,OAAS,GAAqB,EAAhB6C,EAAO7C,OAC5B,MAAM,IAAI7C,MAAM,oEAAsE0F,EAAO7C,QAGjG,IAAMb,EAAO,IAAIC,EAAe,CAC5BC,QAASwD,EAAO,GAChBlF,QAASkF,EAAO,GAChBnF,MAAOmF,EAAO,GACd9E,WAAY8E,EAAO,GACnBvD,MAAOuD,EAAO,GACd5E,UAAW4E,EAAO,KAKtB,OAHsB,IAAlBA,EAAO7C,SACPb,EAAK2D,KAAOD,EAAO,IAEhB1D,M,wLC9Ff,Y,qNAEqBN,E,WACjB,WAAYjC,GAAO,c,4FAAA,SACf,IAAIC,EAAU,GAGd,IAAI,aAAcD,GAAQ,CACtB,IAAImG,EAAa,IACjB,aAAAnG,GAAK,KAALA,EAAc,SAACoG,GACPA,aAAgB7E,UAASA,SACzB4E,EAAWC,EAAKlB,QAAS,EAEzBiB,EAAWC,IAAQ,IAG3BnG,EAAUkG,YACc,IAAVnG,IACdC,EAAUD,IAId,6BAAcuB,UAASkE,MAAvB,OAAoC,SAACY,IACa,IAA1CpG,EAAQqG,eAAeD,EAAQnB,OAC/B,EAAKmB,EAAQnB,QAAS,EAEtB,EAAKmB,EAAQnB,OAASjF,EAAQoG,EAAQnB,SAAU,GAErDhF,M,qGAGe,aACZqG,EAAmB,GAMzB,OALA,6BAAchF,UAASkE,MAAvB,OAAoC,SAACY,IACL,IAAxB,EAAKA,EAAQnB,QACbqB,EAAiBC,KAAKH,KAGvBE,K,kCAGOE,GACd,IAAMC,EAAOD,EAAqBtD,MAAM,KAClCwD,GAAW,aAAcpF,UAASkE,KAClCc,EAAmB,GASzB,OARA,aAAAG,GAAI,KAAJA,EAAa,SAACE,GACV,IAAK,IAAIhH,EAAI,EAAGA,EAAI+G,EAASvD,OAAQxD,IAC7BgH,IAAYD,EAAS/G,GAAGiH,UACxBN,EAAiBC,KAAKG,EAAS/G,MAI3B,IAAIqC,EAAesE,O,4HCpD3C,I,EA+Be,CACXd,IAXQ,CArBU,MACA,MACH,KACM,KACA,KACA,KACD,KA2BpBqB,cAjCkB,MAkClBC,cAjCkB,MAkClBlE,WAjCe,KAkCfmE,iBAjCqB,KAkCrBC,iBAjCqB,KAkCrBC,iBAjCqB,KAkCrBC,gBAjCoB,IAkCpBC,MAzBU,CAfQ,MACA,MACH,MAuCfC,QAjCY,CALS,KACA,KACA,KACD,M,qICNxB,WACA,Y,qNAKqB9C,E,sNACRvE,GACL,OAAO,I,4BAGLA,GACF,OAAO,IAAID,UAAgB,CAAES,KAAMC,UAAM6B,OAAQX,eAAgB3B,Q,gKCZzE,WACA,YACA,YACA,YACA,YACA,YACA,Y,qNAMqBqE,E,sNAERrE,GAAO,MACNuC,EAAOC,UAAe8E,WAAWtH,GACjCuH,EAAiBtF,UAAeqF,WAAW/E,EAAKlB,WAChDmD,OAAyB3C,IAAdU,EAAK2D,MACE,MAAjB3D,EAAKE,UACJF,EAAKiF,qBAAwBjF,EAAKmD,qBAAqD,KAA9B,eAAAnD,EAAKxB,SAAL,OAAqB,QAC9EwB,EAAKkF,mBAAqBlF,EAAKsD,mBAAqBtD,EAAKuD,iBAC1C,MAAfvD,EAAKG,QACgB,MAApBH,EAAKpB,YAAyC,MAAnBoB,EAAKlB,WACL,MAApBkB,EAAKpB,YAAoE,EAA9CoG,EAAezE,sBAAsBM,QAChF,GAAIoB,EAAU,CACV,GAAIjC,EAAKmD,oBAAqB,CAC1B,IAAMgC,EAAkB9E,UAAUyE,QAClC,OAAiD,IAA1C,aAAAK,GAAe,KAAfA,EAAwBnF,EAAK5B,UAExC,GAAI4B,EAAKsD,kBAAmB,CACxB,IAAM8B,EAAgB/E,UAAUwE,MAChC,OAA+C,IAAxC,aAAAO,GAAa,KAAbA,EAAsBpF,EAAK5B,UAEtC,OAAO,EAEX,OAAO,I,4BAGLX,GACF,IAAMuC,EAAOC,UAAe8E,WAAWtH,GACjCC,EAAU,IAAIF,UAAgB,CAAES,KAAMC,UAAMC,QAIlD,GAHAT,EAAQU,SAAW4B,EAAK5B,SAGC,MAArBV,EAAQU,SACRV,EAAQW,GAAK,IAAIC,UAAK,CAAEC,MAAOyB,EAAKzB,MAAOC,QAASwB,EAAKxB,cACtD,CACH,IAAM6G,EAAQ,IAAIC,UAAMtF,EAAKzB,OAGxBb,EAAQU,SAAW,IAAO,GAAM4B,EAAKuD,iBAGtC8B,EAAME,KAAM,aAASF,EAAME,IAAK,IAAM,GAE1C7H,EAAQe,KAAO,IAAIH,UAAK,CAACC,MAAO8G,EAAMG,MAAOhH,QAAS,IACtDd,EAAQgB,GAAK,IAAIJ,UAAK,CAACC,MAAO8G,EAAME,IAAK/G,QAAS,IAItD,IAAMwG,EAAiBtF,UAAeqF,WAAW/E,EAAKlB,WAKtD,OAJkD,EAA9CkG,EAAezE,sBAAsBM,SACrCnD,EAAQO,KAAOC,UAAMkC,cACrB1C,EAAQiB,WAAaqG,GAElBtH,M,0LChEX,WAAY+H,I,4FAAW,SACnB,IAAMC,GAAgB,aAAAD,GAAS,KAATA,EAAkB,KAClCE,GAAa,aAAAF,GAAS,KAATA,EAAkB,KAC/BJ,EAAQI,EAAU7F,OAAO,GAAsB,IAAnB8F,EAAuBD,EAAU5E,OAAS6E,GAC5E/H,KAAK6H,MAAQH,EAAMzF,OAAO,GAAmB,IAAhB+F,EAAoBN,EAAMxE,OAAS8E,GAChEhI,KAAK4H,KAAsB,IAAhBI,EAAoBhI,KAAK6H,MAAQH,EAAMzF,OAAO+F,EAAa,K,4JCN9E,WACA,YACA,YACA,Y,qNAMqB5D,E,WACjB,c,4FAAc,SACVpE,KAAKiI,OAAS,IAAIC,OAAO,mB,wFAGpBpI,GAAO,UACNuC,EAAOC,UAAe8E,WAAWtH,GACjCwE,OAAyB3C,IAAdU,EAAK2D,MACE,MAAjB3D,EAAKE,SACLF,EAAKiF,qBACLjF,EAAKkF,mBACU,MAAflF,EAAKG,QAC6B,KAAlC,eAAAH,EAAKpB,YAAL,OAAwB,OACU,KAAlC,eAAAoB,EAAKpB,YAAL,OAAwB,OACU,KAAlC,eAAAoB,EAAKpB,YAAL,OAAwB,OAGY,IAAjC,aAASoB,EAAKpB,WAAY,MAAa,aAASoB,EAAKpB,WAAY,KAAO,IAC/C,MAApBoB,EAAKpB,YAAyC,MAAnBoB,EAAKlB,WACf,MAApBkB,EAAKpB,YAAsBjB,KAAKiI,OAAOE,KAAK9F,EAAKlB,YAC7D,OAAOmD,I,4BAGLxE,GACF,IAAMuC,EAAOC,UAAe8E,WAAWtH,GACjCC,EAAU,IAAIF,UAAgB,CAChCS,KAAMC,UAAMuC,eACZpC,GAAI,IAAIC,UAAK,CAAEC,MAAOyB,EAAKzB,MAAOC,QAASwB,EAAKxB,YAiBpD,MAbwB,MAApBwB,EAAKpB,WACLlB,EAAQyB,iBAAmB,YAE3BzB,EAAQyB,iBAAmB,aAIE,eAA7BzB,EAAQyB,iBACRzB,EAAQkB,WAAaoB,EAAKpB,YAE1BlB,EAAQmB,YAAcmB,EAAKlB,UAAUc,QAAQ,GAC7ClC,EAAQoB,UAAYkB,EAAKlB,UAAUc,OAAO,EAAG,IAE1ClC,M,m2DCrDMoD,E,WACjB,aAAyC,UAA7BiF,EAA6B,uDAArB,U,4FAAqB,oCAARC,EAAQ,iCAARA,EAAQ,yBACrC,8DAASA,MACJD,QAAUA,EAFsB,E,8OADH/H,Q,oGCA1C,YACA,YACA,YACA,WACA,Y,mDAEA,IAAMiI,EAAyB1I,EAAQ,KACjC2I,EAAwB3I,EAAQ,KAChC4I,EAAoB5I,EAAQ,KAIlC6I,QAAQnJ,OAFY,uBAEQ,IACvBoJ,UAAU,qBAAsB,WAC7B,MAAO,CACHC,SAAU,IACVC,YAAaN,EACbO,MAAO,CACHtH,GAAI,OACJxB,QAAS,YAEb+I,KAAM,SAASD,EAAOE,EAASC,GAC3BH,EAAMtH,GAAKsH,EAAMtH,IAAM,WACvBsH,EAAM9I,QAAQO,KAAOuI,EAAM9I,QAAQO,MAAQC,UAAMC,MACjDqI,EAAM9I,QAAU,IAAIF,UAAgBgJ,EAAM9I,SAC1C8I,EAAMpC,SAAWpF,UAASkE,IAG1BsD,EAAMI,YAAc,WAChB,IACIJ,EAAM5E,YAAStC,EACfkH,EAAM9I,QAAQkE,OAAS4E,EAAM5E,OAC7B4E,EAAM9I,QAAQgB,GAAGmI,WAAQvH,EACzBkH,EAAM9I,QAAQ+D,oBAChB,MAAOqF,GACa,OAAdA,EAAEf,SACFS,EAAM9I,QAAQgB,GAAGmI,MAAQC,EAAEC,QAC3BP,EAAM5E,OAAS,CAAElD,GAAIoI,EAAEC,UAChBD,EAAEf,SACTS,EAAM5E,OAAS,GACf4E,EAAM5E,OAAOkF,EAAEf,SAAWe,EAAEC,SAE5BC,QAAQC,IAAI,4BAA6BH,GAE7CN,EAAM9I,QAAQkE,OAAS4E,EAAM5E,SAKrC4E,EAAMU,YAAY,CACd,eACA,mBACA,qBACA,oBACA,sBACA,2BACA,0BACDV,EAAMI,aACTJ,EAAMW,iBAAiB,aAAcX,EAAMI,aAC3CJ,EAAMW,iBAAiB,eAAgBX,EAAMI,aAC7CJ,EAAMW,iBAAiB,aAAcX,EAAMI,aAC3CJ,EAAMW,iBAAiB,qBAAsBX,EAAMI,aAGnDJ,EAAMY,OAAO,qBAAsB,SAASC,EAAUC,GAC9CD,IAAaC,GAA+C,eAAnCd,EAAM9I,QAAQyB,mBACvCqH,EAAM9I,QAAQyB,iBAAmB,gBAGzCqH,EAAMU,YAAY,CAAC,oBAAqB,uBAAwB,SAASG,EAAUC,GAC1ED,EAAS,KAAOC,EAAS,IAAMD,EAAS,KAAOC,EAAS,IACf,cAAnCd,EAAM9I,QAAQyB,mBACrBqH,EAAM9I,QAAQyB,iBAAmB,mBAOpDkH,UAAU,uBAAwB,WAC/B,MAAO,CACHC,SAAU,IACVC,YAAaL,EACbM,MAAO,CACHe,MAAO,eAKlBlB,UAAU,gBAAiB,CAAC,WACzB,MAAO,CACHC,SAAU,IACVC,YAAaJ,EACbK,MAAO,CAIHgB,MAAO,WAGPnF,KAAM,SAMNoF,YAAa,gBAGbhI,eAAgB,oBAEpBgH,KAAM,SAASD,EAAOE,EAASC,QAECrH,IAAxBkH,EAAMgB,MAAM9J,QACZ8I,EAAM9I,QAAU,CACZ2E,KAAMxE,UAAUE,kBAChB0B,gBAAgB,EAChBgI,YAAa,GAGjBjB,EAAM9I,QAAU8I,EAAMgB,MAAM9J,QAEI,kBAAzB8I,EAAM/G,iBACb+G,EAAM9I,QAAQ+B,eAAiB+G,EAAM/G,gBAErC+G,EAAMnE,OAASxE,UAAUC,mBAAqB0I,EAAMnE,OAASxE,UAAUE,oBACvEyI,EAAM9I,QAAQ2E,KAAOmE,EAAMnE,MAEE,iBAAtBmE,EAAMiB,cACbjB,EAAM9I,QAAQ+J,YAAcjB,EAAMiB,aAItCjB,EAAM9I,QAAQ2E,KAAOmE,EAAM9I,QAAQ2E,MAAQmE,EAAMgB,MAAMnF,KACnDmE,EAAM9I,QAAQ2E,OAASxE,UAAUC,mBAAqB0I,EAAM9I,QAAQ2E,OAASxE,UAAUE,oBACvFyI,EAAM9I,QAAQ2E,KAAOxE,UAAUC,mBAES,kBAAjC0I,EAAM9I,QAAQ+B,iBACrB+G,EAAM9I,QAAQ+B,gBAAiB,GAEM,iBAA9B+G,EAAM9I,QAAQ+J,cACrBjB,EAAM9I,QAAQ+J,YAAc,GAI1BjB,EAAMgB,iBAAiBlJ,YACzBkI,EAAMgB,MAAQ,IAAIlJ,UAAKkI,EAAMgB,QAIjChB,EAAMgB,MAAMhI,QAAQgH,EAAM9I,QAAQ2E,MAEhB,SAAdqF,IAAyB,QACzBlB,EAAMhI,QAAU,GAChB,IAAK,IAAInB,EAAE,EAAGA,EAAE,GAAIA,GAAGmJ,EAAM9I,QAAQ+J,YACjCjB,EAAMhI,QAAQyF,KAAK5G,IAG6B,KAAhD,eAAAmJ,EAAMhI,SAAN,OAAsBgI,EAAMgB,MAAMhJ,UAClCgI,EAAMhI,QAAQyF,KAAKuC,EAAMgB,MAAMhJ,UAEnC,eAAAgI,EAAMhI,SAAN,OAAmB,SAASmJ,EAAMC,GAC9B,OAAO,aAASD,EAAM,KAAM,aAASC,EAAO,MAGpC,SAAZC,IACArB,EAAMjI,MAAQ,GAGd,IAFA,IAAIiH,EAAQgB,EAAMgB,MAAMnF,OAASxE,UAAUE,kBAAoB,EAAG,EAC9DwH,EAAMiB,EAAMgB,MAAMnF,OAASxE,UAAUE,kBAAoB,GAAK,GACzDV,EAAEmI,EAAOnI,GAAGkI,EAAKlI,IACtBmJ,EAAMjI,MAAM0F,KAAK5G,GAKzBqK,IACAG,IAGArB,EAAMY,OAAO,sBAAuB,SAASC,GACzCK,MAGJlB,EAAMY,OAAO,eAAgB,SAASC,EAAUC,GACxCD,IAAaC,IAEbd,EAAMgB,MAAMhI,QAAQgH,EAAM9I,QAAQ2E,MAGlCwF,a,wBC7LxB,IAAIC,EAAO,oIAEXxK,OAAO8I,QAAQnJ,OAAO,MAAM8K,IAAI,CAAC,iBAAkB,SAASC,GAAKA,EAAEC,IAAIH,EAD5D,09LAEX7K,EAAOD,QAAU8K,G,wBCHjB,IAAIA,EAAO,mIAEXxK,OAAO8I,QAAQnJ,OAAO,MAAM8K,IAAI,CAAC,iBAAkB,SAASC,GAAKA,EAAEC,IAAIH,EAD5D,qaAEX7K,EAAOD,QAAU8K,G,wBCHjB,IAAIA,EAAO,+HAEXxK,OAAO8I,QAAQnJ,OAAO,MAAM8K,IAAI,CAAC,iBAAkB,SAASC,GAAKA,EAAEC,IAAIH,EAD5D,wqBAEX7K,EAAOD,QAAU8K,G,6HCHjB,I,EAAc,CACV3J,MAAO,QACPiC,cAAe,cACfK,eAAgB,eAChBV,OAAQ,U","file":"onms-schedule-editor.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn ","import ClockMode from './ClockMode';\nimport Weekdays from './Weekdays';\nimport Types from './Types';\nimport Time from './Time';\nimport CronDefinition from './CronDefintion';\nimport WeekdayOptions from './WeekdayOptions';\nimport CustomParser from './parsers/CustomParser';\nimport DailyParser from './parsers/DailyParser';\nimport DayOfMonthParser from './parsers/DayOfMonthParser';\nimport ContextError from './ContextError';\nimport Intervals from './Intervals';\n\nimport CronParser from 'cron-parser';\nimport moment from 'moment';\nrequire('moment-timezone');\n\nexport default class ScheduleOptions {\n\n    /* eslint-disable complexity */\n    constructor(input) {\n        const options = typeof input === 'undefined' ? {} : input;\n\n        // Pre populate Values\n        this.clockMode = options.clockMode || ClockMode.FULL_CLOCK_SYSTEM;\n        if (this.clockMode !== ClockMode.HALF_CLOCK_SYSTEM && this.clockMode !== ClockMode.FULL_CLOCK_SYSTEM) {\n            throw new Error('Provided clock mode not supported')\n        }\n\n        // Daily\n        this.type = options.type || Types.DAILY;\n        this.interval = typeof options.interval !== 'undefined' ? options.interval : 0;\n        this.at = options.at || new Time({hours: 0, minutes: 0});\n        this.from = options.from || new Time({hours: 0, minutes: 0});\n        this.to = options.to || new Time({hours: 23, minutes: 0});\n\n        // Days per Week\n        this.daysOfWeek = options.daysOfWeek || {};\n\n        // Days per Month\n        this.dayOfMonth = options.dayOfMonth || '1'; // 1st day\n        this.weekOfMonth = options.dayOfMonth || '1';\n        this.dayOfWeek = options.dayOfWeek || String(Weekdays.Sunday.id);\n        this.dayOfMonthToggle = options.dayOfMonthToggle || 'dayOfMonth';\n\n        // Custom\n        this.cronExpression = options.cronExpression || '0 0/5 * * * ?';\n\n        // Report Time Zone to use (if any)\n        this.timezone = options.timezone || undefined;\n\n        // Enable debugging?\n        this.showDebugOptions = options.showDebugOptions || false;\n\n        // Ensure each time is actually a Time object\n        if (!(this.at instanceof Time)) {\n            this.at = new Time(this.at);\n        }\n        if (!(this.from instanceof Time)) {\n            this.from = new Time(this.from);\n        }\n        if (!(this.to instanceof Time)) {\n            this.to = new Time(this.to);\n        }\n\n        // Enforce the right clock mode\n        this.at.convert(this.clockMode);\n        this.from.convert(this.clockMode);\n        this.to.convert(this.clockMode);\n\n        // Enforce disabling Minutes\n        this.from.options.disableMinutes = true;\n        this.to.options.disableMinutes = true;\n\n        // Enforce correct type\n        if (!(this.daysOfWeek instanceof WeekdayOptions)) {\n            this.daysOfWeek = new WeekdayOptions(this.daysOfWeek);\n        }\n        this.interval = String(this.interval);\n    }\n\n    getSelectedWeekdays() {\n        const selectedWeekdays = Object.keys(this.daysOfWeek)\n            .filter(function(key) {\n                return this.daysOfWeek[key] === true;\n            }, this)\n            .map(function(key) {\n                return key.substr(0, 3).toUpperCase();\n            });\n        return selectedWeekdays;\n    }\n\n    getCronExpression() {\n\n        // Validate before actually returning the expression\n        this.validate();\n\n        // In case of a custom expression, just use it directly\n        if (this.type === Types.CUSTOM) {\n            return this.cronExpression;\n        }\n\n        // Otherwise, re Populate a cron definition\n        const cron = new CronDefinition({seconds: 0, minutes: 0, hours: 0, dayOfMonth: '*', month: '*', dayOfWeek: '?'});\n\n        // Daily Calculation\n        if (this.type === Types.DAILY || this.type === Types.DAYS_PER_WEEK) {\n            const interval = this.interval;\n            const at = new Time(this.at, ClockMode.FULL_CLOCK_SYSTEM);\n            const from = new Time(this.from, ClockMode.FULL_CLOCK_SYSTEM);\n            const to = new Time(this.to, ClockMode.FULL_CLOCK_SYSTEM);\n\n            if (interval === '0') { // Only once per day\n                cron.hours = at.hours;\n                cron.minutes = at.minutes;\n            } else if (interval === Intervals.EVERY_HOUR) { // Every hours\n                const hours = from.hours === to.hours ? from.hours : (from.hours + '-' + to.hours);\n                cron.hours = hours;\n                cron.minutes = 0;\n            } else if (interval % 60 === 0) { // every 2 or 3 hours\n                const hours = from.hours + '-' + to.hours;\n                cron.hours = hours + '/' + (interval / 60);\n                cron.minutes = 0;\n            } else { // every n minutes\n                if (from.hours === to.hours) {\n                    cron.hours = from.hours;\n                    cron.minutes = 0;\n                } else {\n                    // In case we defined an hours range, we decrease the end range by 1\n                    // This is necessary, because the cron expression \"0 0/30 1-2 * * ?\"\n                    // would fire at 1:00, 1:30, 2:00 and 2:30 every day.\n                    // By decreasing the hour by 1, it will fire at 1:00 and 1:30 instead.\n                    cron.hours = from.hours + '-' + (to.hours - 1);\n                    cron.minutes = '0/' + interval;\n                }\n            }\n        }\n\n        // Update dayOfWeek if we are in day of week mode\n        if (this.type === Types.DAYS_PER_WEEK) {\n            cron.dayOfWeek = this.getSelectedWeekdays().join(',');\n        }\n        if (this.type === Types.DAYS_PER_MONTH) {\n            const at = new Time(this.at, ClockMode.FULL_CLOCK_SYSTEM);\n            cron.minutes = at.minutes;\n            cron.hours = at.hours;\n            if (this.dayOfMonthToggle === 'dayOfMonth') {\n                cron.dayOfMonth = this.dayOfMonth;\n            } else {\n                cron.dayOfWeek = this.dayOfWeek + (this.weekOfMonth !== 'L' ? '#' : '') + this.weekOfMonth;\n            }\n        }\n\n        // Due to a quartz limitation either cron.dayOfMonth or cron.dayOfWeek must be '?'\n        // Source: http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html (Bottom of the page)\n        //\n        // As dayOfWeek is '?' by default if not defined, we set dayOfMonth to ? if dayOfWeek is set\n        if (this.type === Types.DAYS_PER_WEEK || this.type === Types.DAYS_PER_MONTH && cron.dayOfWeek !== '?') {\n            cron.dayOfMonth = '?';\n        }\n\n        return cron.asCronExpression();\n    }\n\n    validate() {\n        if (this.type === Types.CUSTOM) {\n            const items = this.cronExpression.trim().split(' ');\n            if (items.length < 6 || items.length > 7) {\n                throw new ContextError('cronExpression', 'Invalid cron expression');\n            }\n        }\n\n        // Ensure that we actually have set a day\n        if (this.type === Types.DAYS_PER_WEEK) {\n            if (this.type === Types.DAYS_PER_WEEK && this.getSelectedWeekdays().length === 0) {\n                throw new ContextError('dayOfWeek', 'Please select at least one day');\n            }\n        }\n\n        // If there is an interval, ensure from is before to, otherwise bail\n        if ((this.type === Types.DAILY || this.type === Types.DAYS_PER_WEEK) && this.interval !== '0') {\n            if (this.to.isBefore(this.from)) {\n                throw new ContextError('to', 'To time must be equal or after from time');\n            }\n        }\n    }\n\n    getServerZone() {\n        return this.serverZone || window._onmsZoneId;\n    }\n\n    getBrowserZone() {\n        return moment.tz.guess();\n    }\n\n    getNextExecution(displayZone) {\n        const interval = CronParser.parseExpression(this.getCronExpression(), {\n            tz: this.timezone,\n        });\n\n        const d = interval.next().toDate();\n        return moment.tz(d, displayZone || this.timezone || moment.tz.guess());\n    }\n\n    isValid() {\n        return typeof this.errors === 'undefined' || Object.keys(this.errors).length === 0;\n    }\n\n    static createFrom(input) {\n       const parsers = [\n            new DailyParser(),\n            new DayOfMonthParser(),\n            new CustomParser() // If nothing else was able to parse it, we make it a custom expression\n        ];\n        for (let i = 0; i < parsers.length; i++) {\n            if (parsers[i].canParse(input) === true) {\n                const options = parsers[i].parse(input);\n                return options;\n            }\n        }\n        // This is technically unreachable code\n        // but to make eslint happy, we have to put this in\n        return new CustomParser().parse(input);\n    }\n}\n","import ClockMode from './ClockMode';\n\nexport default class Time {\n    constructor (input, clockMode) {\n        const newInput = input || {};\n        this.hours = typeof newInput.hours === 'undefined' ? 12 : parseInt(newInput.hours, 10);\n        this.minutes = typeof newInput.minutes === 'undefined' ? 0 : parseInt(newInput.minutes, 10);\n        this.suffix = newInput.suffix || null;\n        this.mode = this.suffix === null ? ClockMode.FULL_CLOCK_SYSTEM : ClockMode.HALF_CLOCK_SYSTEM;\n\n        // Reset suffix if 24 clock mode\n        if (this.mode === ClockMode.FULL_CLOCK_SYSTEM) {\n            this.suffix = null;\n        }\n\n        // Additional options for rendering\n        this.options = newInput.options || {};\n        this.verify();\n\n        // If a clockMode is defined, automatically convert it\n        if (clockMode === ClockMode.FULL_CLOCK_SYSTEM || clockMode === ClockMode.HALF_CLOCK_SYSTEM) {\n            this.convert(clockMode);\n        }\n    }\n\n    verify() {\n        if (this.mode === ClockMode.HALF_CLOCK_SYSTEM) {\n            if (this.suffix !== 'am' && this.suffix !== 'pm') {\n                throw new Error('Clock suffix, must be either \\'am\\' or \\'pm\\', but was \\'' + this.suffix + '\\'');\n            }\n            if (this.hours <= 0 || this.hours > 12) {\n                throw new Error('Hours must be between [1-12] but was ' + this.hours);\n            }\n        }\n        if (this.mode === ClockMode.FULL_CLOCK_SYSTEM) {\n            if (this.hours < 0 || this.hours > 23) {\n                throw new Error('Hours must be between [0-23] but was ' + this.hours);\n            }\n        }\n        if (this.minutes < 0 || this.minutes > 59) {\n            throw new Error('Minutes must be between [0-59] but was ' + this.minutes);\n        }\n    }\n\n    getMinutesOfDay() {\n        const thisTime = new Time(this, ClockMode.FULL_CLOCK_SYSTEM);\n        return thisTime.hours * 60 + thisTime.minutes;\n    }\n\n    isBefore(other) {\n        if (!(other instanceof Time)) {\n            throw new Error('Other object must be of type Time, but was of type ' + typeof other);\n        }\n        const minutesOfDay = this.getMinutesOfDay();\n        const otherMinutesOfDay = other.getMinutesOfDay();\n        const before = minutesOfDay - otherMinutesOfDay < 0;\n        return before;\n    }\n\n    convert(newMode) {\n        if (newMode !== ClockMode.FULL_CLOCK_SYSTEM && newMode !== ClockMode.HALF_CLOCK_SYSTEM) {\n            throw new Error('Unknown Clock Mode \\'' + newMode + '\\'');\n        }\n\n        // If conversion is required\n        if (this.mode !== newMode) {\n            // AM/PM Clock -> 24 Hours Clock\n            if (newMode === ClockMode.FULL_CLOCK_SYSTEM) {\n                // 12:00 am is 00:00\n                if (this.hours === 12 && this.suffix === 'am') {\n                    this.hours = 0;\n                }\n                // anything pm requires a 12 hours offset\n                if (this.suffix === 'pm' && this.hours >= 1 && this.hours < 12) {\n                    this.hours += 12;\n                }\n                this.suffix = null;\n            }\n\n            // 24 Hours Clock -> AM/PM Clock\n            if (newMode === ClockMode.HALF_CLOCK_SYSTEM) {\n                // 00:00 is 12:00 am\n                if (this.hours === 0) {\n                    this.hours = 12;\n                    this.suffix = 'am';\n                }\n                // anything between 1:00 and 11:00 am (we consider hours only here) are 'am'\n                else if (this.hours >= 1 && this.hours <= 11) {\n                    this.suffix = 'am';\n                }\n                // 12:00 is 12:00 pm\n                else if (this.hours === 12) {\n                    this.suffix = 'pm';\n                }\n                // anything > 12, requires a -12 and is pm\n                else if (this.hours > 12) {\n                    this.hours -= 12;\n                    this.suffix = 'pm';\n                }\n            }\n            this.mode = newMode;\n        }\n        return this;\n    }\n\n    toString() {\n        return ('00' + this.hours).slice(-2) + ':' + ('00' + this.minutes).slice(-2) + (this.mode === ClockMode.HALF_CLOCK_SYSTEM ? (' ' + this.suffix) : '');\n    }\n}\n","const ClockMode = {\n    HALF_CLOCK_SYSTEM: 'AM_PM',\n    FULL_CLOCK_SYSTEM: '24_HOURS'\n};\nexport default ClockMode;\n","class Weekdays {\n    constructor(id, label) {\n        this.id = id;\n        this.label = label;\n    }\n\n    get shortcut() {\n        return this.label.substr(0, 3).toUpperCase();\n    }\n}\n\nconst Sunday = new Weekdays(1, 'Sunday');\nconst Monday = new Weekdays(2, 'Monday');\nconst Tuesday = new Weekdays(3, 'Tuesday');\nconst Wednesday = new Weekdays(4, 'Wednesday');\nconst Thursday = new Weekdays(5, 'Thursday');\nconst Friday = new Weekdays(6, 'Friday');\nconst Saturday = new Weekdays(7, 'Saturday');\n\nconst all = [\n    Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n];\n\nexport default {\n    all,\n    Weekdays,\n    Sunday,\n    Monday,\n    Tuesday,\n    Wednesday,\n    Thursday,\n    Friday,\n    Saturday\n};\n","export default class CronDefinition {\n    constructor(input) {\n        let options = typeof input !== 'undefined' ? input : {};\n        this.seconds = typeof options.seconds !== 'undefined' ? options.seconds : {};\n        this.minutes = typeof options.minutes !== 'undefined' ? options.minutes : {};\n        this.hours = typeof options.hours !== 'undefined' ? options.hours : {};\n        this.dayOfMonth = typeof options.dayOfMonth !== 'undefined' ? options.dayOfMonth : {};\n        this.month = typeof options.month !== 'undefined' ? options.month : {};\n        this.dayOfWeek = typeof options.dayOfWeek !== 'undefined' ? options.dayOfWeek : {};\n    }\n\n    asCronExpression() {\n        const array = [\n            this.seconds, this.minutes, this.hours, this.dayOfMonth, this.month, this.dayOfWeek\n        ];\n        return array.join(' ');\n    }\n\n    get interval() {\n        if (this.isMinutesInterval()) {\n            return this.minutes.substr(this.minutes.indexOf('/') + 1);\n        }\n        if (this.isHoursInterval()) {\n            const hoursInterval = this.hours.substr(this.hours.indexOf('/') + 1);\n            return String(parseInt(hoursInterval, 10) * 60);\n        }\n\n        // If there is no range, it is not possible to determine\n        // anymore if the user originally selected every hour, every 30, 15, 10 or 5 minutes\n        // However if the hours are a range, we must set the interval to anything != 0\n        if (this.isHoursRange() >= 1) {\n            return '60'; // fallback to every hour\n        }\n        return '0';\n    }\n\n    isConcreteMinutes() {\n        return !this.isMinutesInterval()\n            && !this.isMinutesRange()\n            && !this.__contains(this.minutes, ',')\n            && parseInt(this.minutes, 10) >= 0;\n    }\n\n    isMinutesInterval() {\n        return this.__contains(this.minutes, '/');\n    }\n\n    isMinutesRange() {\n        return this.__contains(this.minutes, '-');\n    }\n\n    isConcreteHours() {\n        return !this.isHoursInterval()\n            && !this.isHoursRange()\n            && !this.__contains(this.hours, ',')\n            && parseInt(this.hours, 10) >= 0;\n    }\n\n    isHoursRange() {\n        return this.__contains(this.hours, '-');\n    }\n\n    isHoursInterval() {\n        return this.__contains(this.hours, '/');\n    }\n\n    __contains(input, findMe) {\n        if (typeof input === 'string') {\n            return input.indexOf(findMe) >= 1;\n        }\n        return false;\n    }\n\n    static createFrom(input) {\n        if (typeof input !== 'string' || input === '' || input.trim() === '') {\n            throw new Error('Cannot parse provided expression. Please make sure it is a valid cron expression');\n        }\n        const cronExpression = input.trim();\n        const fields = cronExpression.split(' ');\n        if (fields.length < 6 || fields.length > 7) {\n            throw new Error('Invalid Cron Expression. Expected field count is 6 or 7, but got ' + fields.length);\n        }\n        // Parse it\n        const cron = new CronDefinition({\n            seconds: fields[0],\n            minutes: fields[1],\n            hours: fields[2],\n            dayOfMonth: fields[3],\n            month: fields[4],\n            dayOfWeek: fields[5]\n        });\n        if (fields.length === 7) {\n            cron.year = fields[6];\n        }\n        return cron;\n    }\n}\n","import Weekdays from './Weekdays';\n\nexport default class WeekdayOptions {\n    constructor(input) {\n        let options = {};\n\n        // in case of an array, convert it to an object\n        if (Array.isArray(input)) {\n            let newOptions = {};\n            input.forEach((item) => {\n                if (item instanceof Weekdays.Weekdays) {\n                    newOptions[item.label] = true;\n                } else {\n                    newOptions[item] = true;\n                }\n            });\n            options = newOptions;\n        } else if (typeof input !== 'undefined') {\n            options = input;\n        }\n\n        // Initialize\n        Object.values(Weekdays.all).forEach((weekday) => {\n            if (options.hasOwnProperty(weekday.label) === false) {\n                this[weekday.label] = false;\n            } else {\n                this[weekday.label] = options[weekday.label] && true; // enforce boolean\n            }\n        }, this);\n    }\n\n    getSelectedWeekdays() {\n        const selectedWeekdays = [];\n        Object.values(Weekdays.all).forEach((weekday) => {\n            if (this[weekday.label] === true) {\n                selectedWeekdays.push(weekday);\n            }\n        });\n        return selectedWeekdays;\n    }\n\n    static createFrom(daysOfWeekExpression) {\n        const days = daysOfWeekExpression.split(',');\n        const weekdays = Object.values(Weekdays.all);\n        const selectedWeekdays = [];\n        days.forEach((eachDay) => {\n            for (let i = 0; i < weekdays.length; i++) {\n                if (eachDay === weekdays[i].shortcut) {\n                    selectedWeekdays.push(weekdays[i])\n                }\n            }\n        });\n        const options = new WeekdayOptions(selectedWeekdays);\n        return options;\n    }\n}\n","const EVERY_3_HOURS = '180';\nconst EVERY_2_HOURS = '120';\nconst EVERY_HOUR = '60';\nconst EVERY_30_MINUTES = '30';\nconst EVERY_15_MINUTES = '15';\nconst EVERY_10_MINUTES = '10';\nconst EVERY_5_MINUTES = '5';\n\nconst Minutes = [\n    EVERY_30_MINUTES,\n    EVERY_15_MINUTES,\n    EVERY_10_MINUTES,\n    EVERY_5_MINUTES\n];\n\nconst Hours = [\n    EVERY_3_HOURS,\n    EVERY_2_HOURS,\n    EVERY_HOUR\n];\n\nconst all = [\n    EVERY_3_HOURS,\n    EVERY_2_HOURS,\n    EVERY_HOUR,\n    EVERY_30_MINUTES,\n    EVERY_15_MINUTES,\n    EVERY_10_MINUTES,\n    EVERY_5_MINUTES,\n];\n\nexport default {\n    all,\n    EVERY_3_HOURS,\n    EVERY_2_HOURS,\n    EVERY_HOUR,\n    EVERY_30_MINUTES,\n    EVERY_15_MINUTES,\n    EVERY_10_MINUTES,\n    EVERY_5_MINUTES,\n    Hours,\n    Minutes,\n};","import Types from '../Types';\nimport ScheduleOptions from '../ScheduleOptions';\n\n/**\n * If all fails, the custom parser will handle any cron expression as a Custom ScheduleOptions.\n */\nexport default class CustomParser {\n    canParse(input) {\n        return true;\n    }\n\n    parse(input) {\n        return new ScheduleOptions({ type: Types.CUSTOM, cronExpression: input });\n    }\n}","import Types from '../Types';\nimport Time from '../Time';\nimport Range from '../Range';\nimport CronDefinition from '../CronDefintion';\nimport WeekdayOptions from '../WeekdayOptions';\nimport ScheduleOptions from '../ScheduleOptions';\nimport Intervals from '../Intervals';\n\n/**\n * The daily parser will parse any cron expression,\n * which was generated by the Schedule Editor in \"Daily\" or \"Days per Week\" Mode.\n */\nexport default class DailyParser {\n\n    canParse(input) {\n        const cron = CronDefinition.createFrom(input);\n        const weekdayOptions = WeekdayOptions.createFrom(cron.dayOfWeek);\n        const canParse = cron.year === undefined\n            && cron.seconds === '0'\n            && (cron.isConcreteMinutes() || (cron.isMinutesInterval() && cron.minutes.indexOf('0') === 0))\n            && (cron.isConcreteHours() || cron.isHoursInterval() || cron.isHoursRange())\n            && (cron.month === '*')\n            && ((cron.dayOfMonth === '*' && cron.dayOfWeek === '?')\n                    || (cron.dayOfMonth === '?' && weekdayOptions.getSelectedWeekdays().length > 0));\n        if (canParse) {\n            if (cron.isMinutesInterval()) {\n                const minuteIntervals = Intervals.Minutes;\n                return minuteIntervals.indexOf(cron.interval) >= 0;\n            }\n            if (cron.isHoursInterval()) {\n                const hourIntervals = Intervals.Hours;\n                return hourIntervals.indexOf(cron.interval) >= 0;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    parse(input) {\n        const cron = CronDefinition.createFrom(input);\n        const options = new ScheduleOptions({ type: Types.DAILY });\n        options.interval = cron.interval;\n\n        // Parse at, from and to\n        if (options.interval === '0') {\n            options.at = new Time({ hours: cron.hours, minutes: cron.minutes });\n        } else {\n            const range = new Range(cron.hours);\n\n            // add one hour offset in case of minutes interval and hours are range\n            if ((options.interval % 60 !== 0) && cron.isHoursRange()) {\n                // When generating the cron, the to hour was decreased by one,\n                // we now revert it by increasing it by 1\n                range.end = parseInt(range.end, 10) + 1;\n            }\n            options.from = new Time({hours: range.start, minutes: 0});\n            options.to = new Time({hours: range.end, minutes: 0});\n        }\n\n        // If days of week are set, switch type and apply daysOfWeek accordingly\n        const weekdayOptions = WeekdayOptions.createFrom(cron.dayOfWeek);\n        if (weekdayOptions.getSelectedWeekdays().length > 0) {\n            options.type = Types.DAYS_PER_WEEK;\n            options.daysOfWeek = weekdayOptions;\n        }\n        return options;\n    }\n}\n","export default class Range {\n    constructor(cronHours) {\n        const intervalIndex = cronHours.indexOf('/');\n        const rangeIndex = cronHours.indexOf('-');\n        const range = cronHours.substr(0, intervalIndex === -1 ? cronHours.length : intervalIndex); // remove interval\n        this.start = range.substr(0, rangeIndex === -1 ? range.length : rangeIndex);\n        this.end = rangeIndex === -1 ? this.start : range.substr(rangeIndex + 1);\n    }\n}","import Types from '../Types';\nimport Time from '../Time';\nimport CronDefinition from '../CronDefintion';\nimport ScheduleOptions from '../ScheduleOptions';\n\n/**\n * The DayOfMonthParser will parse any cron expression,\n * which was generated by the Schedule Editor in \"Days of Month\" mode.\n */\nexport default class DayOfMonthParser {\n    constructor() {\n        this.regExp = new RegExp('[1-7]#[1,2,3]|L');\n    }\n\n    canParse(input) {\n        const cron = CronDefinition.createFrom(input);\n        const canParse = cron.year === undefined\n            && cron.seconds === '0'\n            && cron.isConcreteMinutes()\n            && cron.isConcreteHours()\n            && cron.month === '*'\n            && cron.dayOfMonth.indexOf(',') === -1\n            && cron.dayOfMonth.indexOf('-') === -1\n            && cron.dayOfMonth.indexOf('/') === -1\n            // If dayOfMonth is set, dayOfWeek must be ?\n            // Or dayOfMonth is ?, then dayOfWeek must be set, only then it is parsable\n            && (((parseInt(cron.dayOfMonth, 10) >= 1  && parseInt(cron.dayOfMonth, 10) <= 31)\n                    || cron.dayOfMonth === 'L' && cron.dayOfWeek === '?')\n                || (cron.dayOfMonth === '?' && this.regExp.test(cron.dayOfWeek)));\n        return canParse;\n    }\n\n    parse(input) {\n        const cron = CronDefinition.createFrom(input);\n        const options = new ScheduleOptions({\n            type: Types.DAYS_PER_MONTH,\n            at: new Time({ hours: cron.hours, minutes: cron.minutes })\n        });\n\n        // Determine the toggle\n        if (cron.dayOfMonth === '?') {\n            options.dayOfMonthToggle = 'dayOfWeek';\n        } else {\n            options.dayOfMonthToggle = 'dayOfMonth';\n        }\n\n        // Set the values according of the toggle\n        if (options.dayOfMonthToggle === 'dayOfMonth') {\n            options.dayOfMonth = cron.dayOfMonth;\n        } else {\n            options.weekOfMonth = cron.dayOfWeek.substr(-1);\n            options.dayOfWeek = cron.dayOfWeek.substr(0, 1);\n        }\n        return options;\n    }\n}","export default class ContextError extends Error {\n    constructor(context='entity', ...params) {\n        super(...params);\n        this.context = context;\n    }\n}","import ClockMode from './scripts/ClockMode';\nimport Time from './scripts/Time';\nimport ScheduleOptions from './scripts/ScheduleOptions';\nimport Types from './scripts/Types';\nimport Weekdays from './scripts/Weekdays.js';\n\nconst scheduleEditorTemplate = require('./templates/schedule-editor.tpl.html');\nconst intervalInputTemplate = require('./templates/interval-input.tpl.html');\nconst timeInputTemplate = require('./templates/time-input.tpl.html');\n\nconst MODULE_NAME = 'onms.schedule.editor';\n\nangular.module(MODULE_NAME, [])\n    .directive('onmsScheduleEditor', function() {\n        return {\n            restrict: 'E',\n            templateUrl: scheduleEditorTemplate,\n            scope: {\n                id: '=?id',\n                options: '=ngModel'\n            },\n            link: function(scope, element, attrs) {\n                scope.id = scope.id || 'schedule';\n                scope.options.type = scope.options.type || Types.DAILY;\n                scope.options = new ScheduleOptions(scope.options);\n                scope.weekdays = Weekdays.all;\n\n                // Updates the cron expression on each option change\n                scope.verifyInput = function() {\n                    try {\n                        scope.errors = undefined;\n                        scope.options.errors = scope.errors;\n                        scope.options.to.error = undefined;\n                        scope.options.getCronExpression();\n                    } catch (e) {\n                        if (e.context === 'to') {\n                            scope.options.to.error = e.message;\n                            scope.errors = { to: e.message };\n                        } else if (e.context) {\n                            scope.errors = {};\n                            scope.errors[e.context] = e.message;\n                        } else {\n                            console.log('Unexpected error occurred', e);\n                        }\n                        scope.options.errors = scope.errors;\n                    }\n                };\n\n                // Ensure we validate and calculate the cron expression after any change\n                scope.$watchGroup([\n                    'options.type',\n                    'options.interval',\n                    'options.dayOfMonth',\n                    'options.dayOfWeek',\n                    'options.weekOfMonth',\n                    'options.dayOfMonthToggle',\n                    'options.cronExpression'\n                ], scope.verifyInput);\n                scope.$watchCollection('options.at', scope.verifyInput);\n                scope.$watchCollection('options.from', scope.verifyInput);\n                scope.$watchCollection('options.to', scope.verifyInput);\n                scope.$watchCollection('options.daysOfWeek', scope.verifyInput);\n\n                // Change the dayOfMonthToggle if any value was changed from the other \"group\"\n                scope.$watch('options.dayOfMonth', function(newValue, oldValue) {\n                    if (newValue !== oldValue && scope.options.dayOfMonthToggle !== 'dayOfMonth') {\n                        scope.options.dayOfMonthToggle = 'dayOfMonth';\n                    }\n                });\n                scope.$watchGroup(['options.dayOfWeek', 'options.weekOfMonth'], function(newValue, oldValue) {\n                    if ((newValue[0] !== oldValue[0] || newValue[1] !== oldValue[1])\n                            && scope.options.dayOfMonthToggle !== 'dayOfWeek') {\n                        scope.options.dayOfMonthToggle = 'dayOfWeek';\n                    }\n                });\n            }\n        }\n    })\n\n    .directive('onmsScheduleInterval', function() {\n        return {\n            restrict: 'E',\n            templateUrl: intervalInputTemplate,\n            scope: {\n                value: '=ngModel'\n            },\n        }\n    })\n\n    .directive('onmsTimeInput', [function() {\n        return {\n            restrict: 'E',\n            templateUrl: timeInputTemplate,\n            scope: {\n                // The model which is used for rendering.\n                // Must have hours, minutes and suffix property.\n                // If suffix is not set, 24 hours format is assumed\n                model: '=ngModel',\n\n                // Defines if the time uses 24 hours format, or am/pm\n                mode: '=?mode',\n\n                // in case you don't want to show all minutes,\n                // you can define the step size e.g. 5\n                // to only show 0, 5, 10, etc.\n                // Default is 5\n                minutesStep: '=?minutesStep',\n\n                // If you want to disable minute input\n                disableMinutes: '=?disableMinutes'\n            },\n            link: function(scope, element, attrs) {\n                // Set default options, if not defined\n                if (scope.model.options === undefined) {\n                    scope.options = {\n                        mode: ClockMode.HALF_CLOCK_SYSTEM,\n                        disableMinutes: false,\n                        minutesStep: 5,\n                    }\n                } else {\n                    scope.options = scope.model.options;\n                }\n                if (typeof scope.disableMinutes === 'boolean') {\n                    scope.options.disableMinutes = scope.disableMinutes;\n                }\n                if (scope.mode === ClockMode.FULL_CLOCK_SYSTEM || scope.mode === ClockMode.HALF_CLOCK_SYSTEM) {\n                    scope.options.mode = scope.mode;\n                }\n                if (typeof scope.minutesStep === 'number') {\n                    scope.options.minutesStep = scope.minutesStep;\n                }\n\n                // Enforce either the defined rendered mode, or if not provided the mode of the model\n                scope.options.mode = scope.options.mode || scope.model.mode;\n                if (scope.options.mode !== ClockMode.FULL_CLOCK_SYSTEM && scope.options.mode !== ClockMode.HALF_CLOCK_SYSTEM) {\n                    scope.options.mode = ClockMode.FULL_CLOCK_SYSTEM;\n                }\n                if (typeof scope.options.disableMinutes !== 'boolean') {\n                    scope.options.disableMinutes = false;\n                }\n                if (typeof scope.options.minutesStep !== 'number') {\n                    scope.options.minutesStep = 5;\n                }\n\n                // Verify model\n                if (!(scope.model instanceof Time)) {\n                    scope.model = new Time(scope.model);\n                }\n\n                // Enforce correct time visualization\n                scope.model.convert(scope.options.mode);\n\n                var initMinutes = function() {\n                    scope.minutes = [];\n                    for (var i=0; i<60; i+=scope.options.minutesStep) {\n                        scope.minutes.push(i);\n                    }\n                    // Ensure the defined minutes are available\n                    if (scope.minutes.indexOf(scope.model.minutes) === -1) {\n                        scope.minutes.push(scope.model.minutes);\n                    }\n                    scope.minutes.sort(function(left, right) {\n                        return parseInt(left, 10) - parseInt(right, 10);\n                    });\n                };\n                var initHours = function() {\n                    scope.hours = [];\n                    var start = scope.model.mode === ClockMode.HALF_CLOCK_SYSTEM ? 1: 0;\n                    var end = scope.model.mode === ClockMode.HALF_CLOCK_SYSTEM ? 12 : 23;\n                    for (var i=start; i<=end; i++) {\n                        scope.hours.push(i);\n                    }\n                };\n\n                // Input variables\n                initMinutes();\n                initHours();\n\n                // When minutesStep changed, update minutes values\n                scope.$watch('options.minutesStep', function(newValue) {\n                    initMinutes();\n                });\n                // When the mode changed, convert\n                scope.$watch('options.mode', function(newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        // convert time\n                        scope.model.convert(scope.options.mode);\n\n                        // Reset hours as they are different for each mode\n                        initHours();\n                    }\n                });\n            }\n        }\n    }])\n    ;\n","var path = '/home/kevlin/Documents/gracybranch/core/web-assets/src/main/assets/js/lib/onms-schedule-editor/templates/schedule-editor.tpl.html';\nvar html = \"<style type=text/css>onms-time-input{display:inline-block}.iso-datetime{font-family:monospace}.zone{display:inline;margin:unset;padding:.5rem;vertical-align:middle}.next-scheduled-time{padding-top:1rem;padding-bottom:1rem}td{padding-right:.4rem}</style> <form class=form novalidate> <div class=\\\"\\\"> <div class=form-check> <input class=form-check-input type=radio name={{id}}TypeSelect id={{id}}TypeDaily ng-model=options.type value=daily> <label class=form-check-label for={{id}}TypeDaily> Daily </label> </div> <div class=form-check> <input class=form-check-input type=radio name={{id}}TypeSelect id={{id}}TypeDaysPerWeek ng-model=options.type value=daysPerWeek> <label class=form-check-label for={{id}}TypeDaysPerWeek> Days per week </label> </div> <div class=form-check> <input class=form-check-input type=radio name={{id}}TypeSelect id={{id}}TypeDaysPerMonth ng-model=options.type value=daysPerMonth> <label class=form-check-label for={{id}}TypeDaysPerMonth> Days per month </label> </div> <div class=form-check> <input class=form-check-input type=radio name={{id}}TypeSelect id={{id}}TypeCustom ng-model=options.type value=custom> <label class=form-check-label for={{id}}TypeCustom> Cron Expression </label> </div> </div> <hr/> <div class=\\\"\\\" ng-if=\\\"options.type === 'daysPerWeek'\\\"> <label>Weekdays</label> <div class=\\\"form-check ml-1\\\" ng-repeat=\\\"weekday in weekdays\\\"> <input class=form-check-input ng-class=\\\"{'is-invalid': errors.dayOfWeek}\\\" type=checkbox name={{id}}{{weekday.id}} id={{id}}{{weekday.id}} ng-model=options.daysOfWeek[weekday.label] value=custom> <label class=form-check-label for={{id}}{{weekday.id}}> {{weekday.label}} </label> </div> <p class=\\\"text-danger small mb-0\\\" ng-if=errors.dayOfWeek>{{errors.dayOfWeek}}</p> </div> <div class=mt-2 ng-if=\\\"options.type === 'daily' || options.type === 'daysPerWeek'\\\"> <div class=form-group> <label>Interval</label> <onms-schedule-interval ng-model=options.interval></onms-schedule-interval> </div> <div class=form-group ng-if=\\\"options.interval === '0'\\\"> <label>At</label> <onms-time-input ng-model=options.at options=options.at /> <span class=zone>{{options.timezone}}</span> </div> <div class=form-group ng-if=\\\"options.interval !== '0'\\\"> <label>From</label> <onms-time-input ng-model=options.from options=options.from /> </div> <div class=form-group ng-if=\\\"options.interval !== '0'\\\"> <label>To</label> <onms-time-input ng-model=options.to options=options.to /> </div> </div> <div class=\\\"\\\" ng-if=\\\"options.type === 'daysPerMonth'\\\"> <div class=form-group> <label>At</label> <onms-time-input ng-model=options.at options=options.at /> <span class=zone>{{options.timezone}}</span> </div> <div class=\\\"\\\"> <label>On</label> <div class=\\\"form-inline my-1 ml-1\\\"> <input class=\\\"\\\" type=radio ng-model=options.dayOfMonthToggle value=dayOfMonth> <span class=mx-1>the</span> <select class=\\\"form-control custom-select\\\" ng-model=options.dayOfMonth> <option value=1>1st</option> <option value=2>2nd</option> <option value=3>3rd</option> <option value=4>4th</option> <option value=5>5th</option> <option value=6>6th</option> <option value=7>7th</option> <option value=8>8th</option> <option value=9>9th</option> <option value=10>10th</option> <option value=11>11th</option> <option value=12>12th</option> <option value=13>13th</option> <option value=14>14th</option> <option value=15>15th</option> <option value=16>16th</option> <option value=17>17th</option> <option value=18>18th</option> <option value=19>19th</option> <option value=20>20th</option> <option value=21>21st</option> <option value=22>22nd</option> <option value=23>23rd</option> <option value=24>24th</option> <option value=25>25th</option> <option value=26>26th</option> <option value=27>27th</option> <option value=28>28th</option> <option value=29>29th</option> <option value=30>30th</option> <option value=31>31st</option> <option value=L>Last</option> </select> <span class=ml-1>day of every month</span> </div> <div class=\\\"form-inline my-1 ml-1\\\"> <input class=\\\"\\\" type=radio ng-model=options.dayOfMonthToggle value=dayOfWeek> <span class=mx-1>the</span> <select class=\\\"form-control custom-select\\\" ng-model=options.weekOfMonth> <option value=1>first</option> <option value=2>second</option> <option value=3>third</option> <option value=4>fourth</option> <option value=L>last</option> </select> <select class=\\\"form-control custom-select mx-1\\\" ng-model=options.dayOfWeek> <option ng-repeat=\\\"weekday in weekdays track by weekday.id\\\" value={{weekday.id}}>{{weekday.label}}</option> </select> <span>of every month</span> </div> </div> </div> <div class=\\\"\\\" ng-if=\\\"options.type === 'custom'\\\"> <div class=form-inline> <input id=customCronExpressionInput type=text class=form-control ng-class=\\\"{'is-invalid': errors.cronExpression}\\\" ng-model=\\\"options.cronExpression \\\"/> <span class=zone>{{options.timezone}}</span> <a href=http://www.quartz-scheduler.org/documentation/quartz-2.2.2/tutorials/crontrigger.html class=ml-2 target=_blank title=\\\"Help me\\\"> <i class=\\\"fa fa-question-circle\\\" aria-hidden=true></i> </a> <p class=invalid-feedback ng-if=errors.cronExpression>{{errors.cronExpression}}</p> </div> </div> <div class=next-scheduled-time> <label> Next scheduled time: </label> <table> <tr> <td> Report: </td> <td> <span class=iso-datetime>{{options.getNextExecution(options.timezone).format(\\\"llll\\\")}}</span> </td> <td> ({{options.timezone}}) </td> </tr> <tr ng-if=options.getServerZone()> <td> Server: </td> <td> <span class=iso-datetime>{{options.getNextExecution(options.getServerZone()).format(\\\"llll\\\")}}</span> </td> <td> ({{options.getServerZone()}}) </td> </tr> <tr> <td> Browser: </td> <td> <span class=iso-datetime>{{options.getNextExecution(options.getBrowserZone()).format(\\\"llll\\\")}}</span> </td> <td> ({{options.getBrowserZone()}}) </td> </tr> </table> </div> <div class=\\\"text-muted mt-2\\\" ng-if=options.showDebugOptions> <hr/> <label>Generated Cron Expression</label> <pre class=\\\"bg-light px-2 py-2 text-muted\\\">{{options.getCronExpression()}}</pre> <label>Schedule Options</label> <pre class=\\\"bg-light px-2 py-2 text-muted\\\">{{options | json}}</pre> </div> </form> \";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;","var path = '/home/kevlin/Documents/gracybranch/core/web-assets/src/main/assets/js/lib/onms-schedule-editor/templates/interval-input.tpl.html';\nvar html = \"<select class=\\\"form-control custom-select\\\" ng-model=value> <option value=0 selected=selected>once per day</option> <option value=180>every 3 hours</option> <option value=120>every 2 hours</option> <option value=60>every hour</option> <option value=30>every 30 minutes</option> <option value=15>every 15 minutes</option> <option value=10>every 10 minutes</option> <option value=5>every 5 minutes</option> </select> \";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;","var path = '/home/kevlin/Documents/gracybranch/core/web-assets/src/main/assets/js/lib/onms-schedule-editor/templates/time-input.tpl.html';\nvar html = \"<div class=form-inline> <select class=\\\"form-control custom-select mx-1\\\" ng-class=\\\"{'is-invalid': model.error}\\\" ng-options=\\\"i for i in hours\\\" ng-model=model.hours> </select> <span>:</span> <select class=\\\"form-control custom-select mx-1\\\" ng-class=\\\"{'is-invalid': model.error && !options.disableMinutes}\\\" ng-model=model.minutes ng-options=\\\"('00' + i).slice(-2) for i in minutes\\\" ng-disabled=options.disableMinutes> </select> <select class=\\\"form-control custom-select\\\" ng-if=\\\"model.mode === 'AM_PM'\\\" ng-model=model.suffix> <option value=am>am</option> <option value=pm>pm</option> </select> <p class=\\\"invalid-feedback ml-1\\\" ng-if=model.error>{{model.error}}</p> </div> \";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;","const Types = {\n    DAILY: 'daily',\n    DAYS_PER_WEEK: 'daysPerWeek',\n    DAYS_PER_MONTH: 'daysPerMonth',\n    CUSTOM: 'custom'\n};\nexport default Types;\n"],"sourceRoot":""}