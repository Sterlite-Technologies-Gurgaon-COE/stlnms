{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///./src/main/assets/js/apps/timeline-resize/index.js"],"names":["root","factory","exports","module","define","amd","a","i","window","getSize","element","td","closest","undefined","Math","round","offsetWidth","container","width","debounce","require","recalculateBox","e","$","imgs","length","img","w","imgsrc","data","attr","spans","span","htmlsrc","load","String","document","ready","addEventListener"],"mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,IAPxE,CASGC,OAAQ,WACX,O,+ICuBgB,SAAVC,EAAmBC,GAEvB,IAAMC,EAAKD,EAAQE,QAAQ,MAAM,GACjC,QAAWC,IAAPF,EACF,OAAOG,KAAKC,MAAMJ,EAAGK,aAIvB,IAAMC,EAAYP,EAAQE,QAAQ,OAClC,OAAOE,KAAKC,MAXQ,GAWFE,EAAUC,SAd9B,IAAMC,EAAWC,EAAQ,KAAUD,SAiB7BE,EAAiBF,EAAS,WAI9B,IAHA,IAAMG,EAAIC,EAAE,qBAENC,GAAO,aAAAF,GAAC,KAADA,EAAO,OACXf,EAAE,EAAGA,EAAIiB,EAAKC,OAAQlB,IAAK,CAClC,IAAMmB,EAAMH,EAAEC,EAAKjB,IACboB,EAAIlB,EAAQiB,GAClB,GAAIC,EAAG,CACL,IAAMC,EAASF,EAAIG,KAAK,UAAYF,EACpCD,EAAII,KAAK,MAAOF,IAKpB,IADA,IAAMG,GAAQ,aAAAT,GAAC,KAADA,EAAO,QACZf,EAAE,EAAGA,EAAIwB,EAAMN,OAAQlB,IAAK,CACnC,IAAMyB,EAAOT,EAAEQ,EAAMxB,IACfoB,EAAIlB,EAAQuB,GAClB,GAAIL,GAAKK,EAAKH,KAAK,OAAQ,CACzB,IAAMI,EAAUD,EAAKH,KAAK,OAASF,EACnCK,EAAKE,KAAKC,OAAOF,OAlCD,KAuCtBV,EAAEa,UAAUC,MAAMhB,GAClBb,OAAO8B,iBAAiB,SAAUjB,K","file":"timeline-resize.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn ","/*******************************************************************************\n * This file is part of OpenNMS(R).\n *\n * Copyright (C) 2015-2021 The OpenNMS Group, Inc.\n * OpenNMS(R) is Copyright (C) 1999-2021 The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.\n *\n * OpenNMS(R) is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published\n * by the Free Software Foundation, either version 3 of the License,\n * or (at your option) any later version.\n *\n * OpenNMS(R) is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with OpenNMS(R).  If not, see:\n *      http://www.gnu.org/licenses/\n *\n * For more information contact:\n *     OpenNMS(R) Licensing <license@opennms.org>\n *     http://www.opennms.org/\n *     http://www.opennms.com/\n *******************************************************************************/\n\nconst debounce = require('lodash').debounce;\n\nconst DEBOUNCE_RATE = 200; // ms\nconst RELATIVE_SIZE = 0.5;\n\nconst getSize = function(element) {\n  // if we can get the offset width of the actual <td>, use it\n  const td = element.closest('td')[0];\n  if (td !== undefined) {\n    return Math.round(td.offsetWidth);\n  }\n\n  // otherwise, fall back to the old way of calculating\n  const container = element.closest('div'); // This is the panel, not the cell that contains the IMG\n  return Math.round(container.width() * RELATIVE_SIZE);\n}\n\nconst recalculateBox = debounce(() => {\n  const e = $('#availability-box');\n  // Update the timeline headers\n  const imgs = e.find('img');\n  for (let i=0; i < imgs.length; i++) {\n    const img = $(imgs[i]);\n    const w = getSize(img);\n    if (w) {\n      const imgsrc = img.data('imgsrc') + w;\n      img.attr('src', imgsrc);\n    }\n  }\n  // Update the timeline html/images\n  const spans = e.find('span');\n  for (let i=0; i < spans.length; i++) {\n    const span = $(spans[i]);\n    const w = getSize(span);\n    if (w && span.data('src')) {\n      const htmlsrc = span.data('src') + w;\n      span.load(String(htmlsrc));\n    }\n  }\n}, DEBOUNCE_RATE);\n\n$(document).ready(recalculateBox);\nwindow.addEventListener('resize', recalculateBox);\n"],"sourceRoot":""}